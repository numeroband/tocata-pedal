;
; Lorenzo Soto
;

.program switches

.define public num_in_pins 6

start:
    mov isr, !null       [7]
    in pins, num_in_pins [7]
    mov y, isr               ; y current pins
    jmp x!=y debounce        ; x last pins
    jmp start            
debounce:
    mov x, y                 ; x becomes the new value 
    set y, 31                ; Initialize number of consecutive reads
deb_loop:
    mov isr, !null       [7]
    in pins, num_in_pins [7]
    mov osr, y           
    mov y, isr               ; y to check isr
    jmp x!=y debounce        ; If the switches changed reset counter
    mov y, osr           
    jmp y-- deb_loop         ; Check if x is 0 and decrement
    push                 

% c-sdk {

#include "hardware/clocks.h"
#include "hardware/gpio.h"


static inline void switches_program_init(PIO pio, uint sm, uint offset, uint in_pins_start, uint out_pins_start) 
{
    pio_sm_config c = switches_program_get_default_config(offset);

    // IO mapping
    sm_config_set_in_pins(&c, in_pins_start);

    // Shift to the left, no autopull
    sm_config_set_in_shift(&c, false, false, switches_num_in_pins);
    // We don't need the TX FIFO
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    float div = (float)clock_get_hz(clk_sys) / (10 * 1000);
    sm_config_set_clkdiv(&c, div);

    // Init input pins
    uint32_t in_pins_mask = 0;
    for (uint i = 0; i < switches_num_in_pins; ++i)
    {
        uint pin = in_pins_start + i;
        gpio_pull_up(pin);
        pio_gpio_init(pio, pin);
        in_pins_mask |= (1u << pin);
    }

    pio_sm_set_pindirs_with_mask(pio, sm, 0, in_pins_mask);

    // Configure and start SM
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}
